var documenterSearchIndex = {"docs":
[{"location":"#MCHammer.jl-1","page":"MCHammer.jl","title":"MCHammer.jl","text":"","category":"section"},{"location":"#Overview-1","page":"MCHammer.jl","title":"Overview","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"The MC in MC Hammer stands for Monte-Carlo. This tool is inspired by seminal tools such as Oracle Crystal Ball and Palisade @RISK for their ability to quickly build and analyze Monte-Carlo simulation models using Excel functions and automations. MC Hammer replicates their logic, functions and elemental tools in Julia, thus significantly reducing the time, lines of code, complexity and effort to perform advanced modeling and simulation.","category":"page"},{"location":"#Installing-MCHammer-1","page":"MCHammer.jl","title":"Installing MCHammer","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"Install the package as usual using Pkg.","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"    using Pkg\n    Pkg.(\"MCHammer\")","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"If you need to install direct, we recommend using ']' to go in the native Pkg manager.","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"    (v1.1) pkg> add https://github.com/etorkia/MCHammer.jl","category":"page"},{"location":"#Loading-MCHammer-1","page":"MCHammer.jl","title":"Loading MCHammer","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"To load the MCHammer package","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"using MCHammer","category":"page"},{"location":"#Getting-your-environment-setup-for-modeling-1","page":"MCHammer.jl","title":"Getting your environment setup for modeling","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"In order to build your first model, you will need to get a few more packages installed:","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"Distributions.jl : To build a simulation, you need distributions as inputs. Julia offers univariate and multivariate distributions covering most needs.\nStatsBase.jl and Statistics.jl : These packages provide all the functions to analyze results and build models.","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"To load the support packages:","category":"page"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"  julia> using Distributions, Statistics, StatsBase, DataFrames","category":"page"},{"location":"#Tutorials-1","page":"MCHammer.jl","title":"Tutorials","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"Getting Started with MCHammer","category":"page"},{"location":"#Index-1","page":"MCHammer.jl","title":"Index","text":"","category":"section"},{"location":"#","page":"MCHammer.jl","title":"MCHammer.jl","text":"","category":"page"},{"location":"manual/1_functions/#Simulation-Modeling-Functions-1","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"","category":"section"},{"location":"manual/1_functions/#Overview-1","page":"Simulation Modeling Functions","title":"Overview","text":"","category":"section"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"Though most of your modeling can be realized in raw Julia, some of the most important features in a Monte-Carlo simulation package have to do with analyzing and applying correlation in models. MCHammer's correlation approach is based on \"Ronald L. Iman & W. J. Conover (1982) A distribution-free approach to inducing rank correlation among input variables, Communications in Statistics - Simulation and Computation\"","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"The simulation and correlation functions are designed to quickly obtain risk and decision analysis metrics such as moments, percentiles and risk over time.","category":"page"},{"location":"manual/1_functions/#Functions-1","page":"Simulation Modeling Functions","title":"Functions","text":"","category":"section"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"DocTestSetup = quote\n    using Pkg\n    Pkg.add(\"Distributions\")\n    Pkg.add(\"StatsBase\")\n    Pkg.add(\"Statistics\")\n    Pkg.add(\"Dates\")\n    Pkg.add(\"MCHammer\")\n    Pkg.add(\"DataFrames\")\n    Pkg.add(\"Gadfly\")\n\n\n    using MCHammer\n    using Distributions\n    using Random\nend","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"cormat","category":"page"},{"location":"manual/1_functions/#MCHammer.cormat","page":"Simulation Modeling Functions","title":"MCHammer.cormat","text":"cormat(ArrayName, RankOrder=1)\n\nCormat calculates a symetric correlation matrix using both PPMC and Rank Order. Rank Order is default because this is what it used in the Iman-Conover method for correlating of simulated variables.\n\nRankOrder = 1 calculates the Spearman rank order correlation used in MCHammer (this argument is optional and defaults to Spearman)\n\nRankOrder = 0 calculates the Pearson Product Moment Correlation\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"Random.seed!(1) #hide\ntest = rand(Normal(),1000,5)\ncormat(test)\n\n# output\n\n5×5 Array{Float64,2}:\n  1.0         0.045012   0.00247197  -0.0455839   0.0126131\n  0.045012    1.0        0.0534       0.0449149   0.0219751\n  0.00247197  0.0534     1.0          0.0194396   0.0504692\n -0.0455839   0.0449149  0.0194396    1.0        -0.0301272\n  0.0126131   0.0219751  0.0504692   -0.0301272   1.0","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"covmat","category":"page"},{"location":"manual/1_functions/#MCHammer.covmat","page":"Simulation Modeling Functions","title":"MCHammer.covmat","text":"covmat(ArrayName)\n\nCalculates the covariance matrix.\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"covmat(test)\n\n# output\n\n5×5 Array{Any,2}:\n  1.00069    0.0286309  0.0102903  -0.0356815   0.0132867\n  0.0286309  1.09233    0.0598539   0.0536936   0.0216141\n  0.0102903  0.0598539  1.07241     0.0140108   0.0583517\n -0.0356815  0.0536936  0.0140108   0.942015   -0.0240827\n  0.0132867  0.0216141  0.0583517  -0.0240827   1.02767","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"corvar","category":"page"},{"location":"manual/1_functions/#MCHammer.corvar","page":"Simulation Modeling Functions","title":"MCHammer.corvar","text":"corvar(ArrayName, n_trials, correl_matrix)\n\nThe corvar function correlates simulation inputs unsing the Iman Conover Method. Your array must contain >2 simulated inputs. Remember to hcat() your inputs into tables reflecting your input correlation matrices.\n\nn_trials: is the number of trials in the simulation. This must be consistent.\n\ncorrel_matrix: must be defined as a Square Positive Definite correlation matrix. This can be calculated from histroical data using cormat() function.\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"Random.seed!(1)\nn_trials = 1000\nsample_data = [rand(LogNormal(0, 0.5),n_trials) rand(Normal(3,2),n_trials) rand(Gamma(1, 0.5),n_trials) rand(LogNormal(0, 0.5),n_trials) rand(Normal(3,2),n_trials) rand(Gamma(1, 0.5),n_trials)]\n\ntest_cmatrix = [1 0 0 0 0 0; 0 1 0 0 0 0; 0 0 1 0 0 0;0 0 0 1 0.75 -0.7; 0 0 0 0.75 1 -0.95; 0 0 0 -0.7 -0.95 1 ]\n\nRandom.seed!(1)\ncormat(corvar(sample_data, n_trials, test_cmatrix))\n\n# output\n\n6×6 Array{Float64,2}:\n  1.0          0.045012    0.00247197  -0.0455839  -0.0138308   0.0112554\n  0.045012     1.0         0.0534       0.0449149   0.0592791  -0.0355262\n  0.00247197   0.0534      1.0          0.0194396   0.0532426  -0.0468971\n -0.0455839    0.0449149   0.0194396    1.0         0.719585   -0.662708\n -0.0138308    0.0592791   0.0532426    0.719585    1.0        -0.939008\n  0.0112554   -0.0355262  -0.0468971   -0.662708   -0.939008    1.0","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"GetCertainty","category":"page"},{"location":"manual/1_functions/#MCHammer.GetCertainty","page":"Simulation Modeling Functions","title":"MCHammer.GetCertainty","text":"GetCertainty(ArrayName, x, AboveBelow=0)\n\nThis function returns the percentage of trials Above (1) or Below(0) a target value of x.\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"Random.seed!(1)\ntest = rand(Normal(),1000)\n\nGetCertainty(test, 0, 1)\n\n# output\n\n0.502","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"fractiles","category":"page"},{"location":"manual/1_functions/#MCHammer.fractiles","page":"Simulation Modeling Functions","title":"MCHammer.fractiles","text":"fractiles(ArrayName, Increment=0.1)\n\nThe fractiles function calculates percentiles at equal increments. The default optional argument for Increments is 0.1 for deciles but can be set to anything such as 0.05 for quintiles or 0.01 for percentiles.\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"fractiles(test)\n\n# output\n\n11×2 Array{Any,2}:\n \"P0.0\"    -3.882\n \"P10.0\"   -1.34325\n \"P20.0\"   -0.860748\n \"P30.0\"   -0.526089\n \"P40.0\"   -0.274806\n \"P50.0\"    0.00474446\n \"P60.0\"    0.218685\n \"P70.0\"    0.472055\n \"P80.0\"    0.800966\n \"P90.0\"    1.2504\n \"P100.0\"   3.12432","category":"page"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"cmd","category":"page"},{"location":"manual/1_functions/#MCHammer.cmd","page":"Simulation Modeling Functions","title":"MCHammer.cmd","text":"cmd(x)\n\nShell /Dos Command wrapper to run batch and shell commands in script. This is used to process SQL from the command line or perform system level operation in a script using a command prompt.\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"truncate_digit","category":"page"},{"location":"manual/1_functions/#MCHammer.truncate_digit","page":"Simulation Modeling Functions","title":"MCHammer.truncate_digit","text":"function  truncate_digit(num, digits=2)\n\nTruncation algorithim to remove decimals (ported by anonymous author from Maple) e.g.\n\n  0.066 = 0.06\n  0.063 = 0.06\n\n\n\n\n\n","category":"function"},{"location":"manual/1_functions/#","page":"Simulation Modeling Functions","title":"Simulation Modeling Functions","text":"Result_1 = truncate_digit(0.667)\nResult_2 = truncate_digit(0.661)\nResult_1 == Result_2\n\n# output\ntrue","category":"page"},{"location":"manual/charts/#Charting-Functions-1","page":"Charting Functions","title":"Charting Functions","text":"","category":"section"},{"location":"manual/charts/#Overview-1","page":"Charting Functions","title":"Overview","text":"","category":"section"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"MCHammer offers the most important charts for building and analyzing Monte-Carlo Results. MCH_Charts contains standard simulation charts for sensitivity, density, trends (time series with confidence bands) for simulation arrays, vectors and dataframes.","category":"page"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"using Pkg\nPkg.add(\"Gadfly\")\nPkg.add(\"Distributions\")\nPkg.add(\"StatsBase\")\nPkg.add(\"Statistics\")\nPkg.add(\"Dates\")\nPkg.add(\"MCHammer\")\nPkg.add(\"DataFrames\")\n\nusing Distributions\nusing DataFrames\nusing MCHammer\nusing Dates\n\n#Sensitivity Example Data\nn_trials = 1000\nRevenue = rand(TriangularDist(2500000,4000000,3000000), n_trials)\nExpenses = rand(TriangularDist(1400000,3000000,2000000), n_trials)\nProfit = Revenue - Expenses\nTrials = [Revenue-Expenses, Revenue, Expenses]\nTrials = DataFrame(Trials)\nnames!(Trials,[:Profit, :Revenue, :Expenses])","category":"page"},{"location":"manual/charts/#Functions-1","page":"Charting Functions","title":"Functions","text":"","category":"section"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"density_chrt","category":"page"},{"location":"manual/charts/#MCHammer.density_chrt","page":"Charting Functions","title":"MCHammer.density_chrt","text":"density_chrt(Data, x_label=\"Sim. Values\")\n\nData is your array, either simulated or historical. x_label [optional] allows you to customize your X axis label.\n\n\n\n\n\n","category":"function"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"dist = rand(Normal(),1000)\ndensity_chrt(dist, \"The Standard Normal\")","category":"page"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"histogram_chrt","category":"page"},{"location":"manual/charts/#MCHammer.histogram_chrt","page":"Charting Functions","title":"MCHammer.histogram_chrt","text":"histogram_chrt(Data, x_label=\"Sim. Values\")\n\nData is your array, either simulated or historical. x_label [optional] allows you to customize your X axis label.\n\n\n\n\n\n","category":"function"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"histogram_chrt(dist, \"The Standard Normal\")","category":"page"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"sensitivity_chrt","category":"page"},{"location":"manual/charts/#MCHammer.sensitivity_chrt","page":"Charting Functions","title":"MCHammer.sensitivity_chrt","text":"sensitivity_chrt(ArrayName, TargetCol, Chrt_Type=1)\n\nTargetCol: used to select the output against which the other variables are analyzed for influence.\n\nChrt_Type: allows to change the chart metric: Spearman (1), PPMC (2) and  Contribution to Variance % (3)\n\n\n\n\n\n","category":"function"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"sensitivity_chrt(Trials,1)","category":"page"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"trend_chrt","category":"page"},{"location":"manual/charts/#MCHammer.trend_chrt","page":"Charting Functions","title":"MCHammer.trend_chrt","text":"trend_chrt(SimTimeArray, PeriodRange, quantiles=[0.05,0.5,0.95])\n\ntrend_chrt allows the visualization of a simulated time series. These can be generated using the GBMM function.\n\nPeriodRange must constructed using the Dates package and use the following syntax :\n\n  dr = collect(Date(2019,1,01):Dates.Year(1):Date(2023,01,01))\n\n\n\n\n\n","category":"function"},{"location":"manual/charts/#","page":"Charting Functions","title":"Charting Functions","text":"ts_trials =[]\ndr = collect(Date(2019,1,01):Dates.Month(1):Date(2019,12,01))\n\n#To setup a TimeSeries simulation with MCHammer\nfor i = 1:1000\n    Monthly_Sales = GBMM(100000, 0.05,0.05,12)\n    Monthly_Expenses = GBMM(50000, 0.03,0.02,12)\n    MonthlyCOGS = Monthly_Sales .* 0.3\n    MonthlyProfit = Monthly_Sales - Monthly_Expenses - MonthlyCOGS\n    push!(ts_trials, MonthlyProfit)\nend\n\ntrend_chrt(ts_trials, dr)","category":"page"},{"location":"manual/time_series/#Time-Series-Simulation-1","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"","category":"section"},{"location":"manual/time_series/#Overview-1","page":"Time-Series Simulation","title":"Overview","text":"","category":"section"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"MCH Timeseries contains functions to create simulated times series with MCHammer. Current implementation supports GBM only. Other methods will be added","category":"page"},{"location":"manual/time_series/#Functions-1","page":"Time-Series Simulation","title":"Functions","text":"","category":"section"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"DocTestSetup = quote\n    using Pkg\n    Pkg.add(\"Distributions\")\n    Pkg.add(\"StatsBase\")\n    Pkg.add(\"Statistics\")\n    Pkg.add(\"Dates\")\n    Pkg.add(\"MCHammer\")\n    Pkg.add(\"DataFrames\")\n    Pkg.add(\"Gadfly\")\n    using MCHammer\n    using Distributions\n    using Random\n    using DataFrames\nend","category":"page"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"GBMMfit","category":"page"},{"location":"manual/time_series/#MCHammer.GBMMfit","page":"Time-Series Simulation","title":"MCHammer.GBMMfit","text":"GBMMfit(HistoricalData, PeriodsToForecast)\n\nGBMMfit uses a vector of historical data to calculate the log returns and use the mean and standard deviation to project a random walk. It the uses the last datapoint in the set as the starting point for the new forecast.\n\nHistoricalData: Vector containing historical data\n\nPeriodsToForecast: integer >1\n\n\n\n\n\n","category":"function"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"Random.seed!(1)\nhistorical = rand(Normal(10,2.5),1000)\nGBMMfit(historical, 12)\n\n# output\n12×1 Array{Float64,2}:\n 6.6992003689078325\n 7.062760356166932\n 7.103000620460403\n 7.420415139367789\n 8.514400412609032\n 3.943937898162356\n 4.146251875790493\n 5.262045352529825\n 0.7692838668172376\n 1.2648073358011491\n 1.5912440333414342\n 2.1886864479965875","category":"page"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"GBMM","category":"page"},{"location":"manual/time_series/#MCHammer.GBMM","page":"Time-Series Simulation","title":"MCHammer.GBMM","text":"GBMM(LastValue, ReturnsMean, ReturnsStd, PeriodsToForecast)\n\nGBMM produces a random wlak using the last data point and requires a mean and standard deviation to be provided.\n\nLastValue: The most recent data point on which to base your random walk.\n\nReturnsMean and ReturnsStd : Historical Mean and Standard Deviation of Returns\n\nPeriodsToForecast is an integer >1\n\n\n\n\n\n","category":"function"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"Random.seed!(1)\n\nGBMM(100000, 0.05,0.05,12)\n\n# output\n\n12×1 Array{Float64,2}:\n 106486.4399226773\n 113846.7611813516\n 116137.16176312814\n 121883.36579797923\n 122864.3632374885\n 130918.80622439094\n 152488.25443945627\n 142827.4651618234\n 153753.52041326065\n 164757.82535740297\n 177804.24203041938\n 195258.14301210243","category":"page"},{"location":"manual/time_series/#How-to-simulate-a-random-walk-1","page":"Time-Series Simulation","title":"How to simulate a random walk","text":"","category":"section"},{"location":"manual/time_series/#","page":"Time-Series Simulation","title":"Time-Series Simulation","text":"using Dates, Distributions, DataFrames, MCHammer #hide\n\nts_trials =[]\ndr = collect(Date(2019,1,01):Dates.Month(1):Date(2019,12,31))\n\n#To setup a TimeSeries simulation with MCHammer\nfor i = 1:1000\n     Monthly_Sales = GBMM(100000, 0.05,0.05,12)\n     Monthly_Expenses = GBMM(50000, 0.03,0.02,12)\n     MonthlyCOGS = Monthly_Sales .* 0.3\n     MonthlyProfit = Monthly_Sales - Monthly_Expenses - MonthlyCOGS\n     push!(ts_trials, MonthlyProfit)\nend\n\n#You can graph the result using trend_chrt()\ntrend_chrt(ts_trials, dr)","category":"page"},{"location":"tutorials/1_first_model/#Building-your-first-model-1","page":"Building your first model","title":"Building your first model","text":"","category":"section"},{"location":"tutorials/1_first_model/#Installing-MCHammer-1","page":"Building your first model","title":"Installing MCHammer","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Install the package as usual using Pkg.","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"    using Pkg\n    Pkg.(\"MCHammer\")","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"If you need to install direct, we recommend using ']' to go in the native Pkg manager.","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"    (v1.1) pkg> add https://github.com/etorkia/MCHammer.jl","category":"page"},{"location":"tutorials/1_first_model/#Loading-MCHammer-1","page":"Building your first model","title":"Loading MCHammer","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"To load the MCHammer package","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"using MCHammer","category":"page"},{"location":"tutorials/1_first_model/#Getting-your-environment-setup-for-modeling-1","page":"Building your first model","title":"Getting your environment setup for modeling","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"In order to build your first model, you will need to get a few more packages installed:","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Distributions.jl : To build a simulation, you need distributions as inputs. Julia offers univariate and multivariate distributions covering most needs.\nStatsBase.jl and Statistics.jl : These packages provide all the functions to analyze results and build models.","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"To load the support packages:","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"  julia> using Distributions, Statistics, StatsBase, DataFrames","category":"page"},{"location":"tutorials/1_first_model/#Building-a-simple-example-1","page":"Building your first model","title":"Building a simple example","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"EVERY MONTE CARLO MODEL HAS 3 COMPONENTS","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Inputs: Ranges or Single Values\nA Model:  Set of mathematical relationships f(x)\nOutputs: The variable(s) of interest you want to analyze","category":"page"},{"location":"tutorials/1_first_model/#Main-Distributions-for-most-modeling-situations-1","page":"Building your first model","title":"Main Distributions for most modeling situations","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Though the most used distributions are cite below, Julia's Distributions package has an impressive array of options. Please check out the complete library of distributions at Distributions.jl","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Normal()\nLogNormal()\nTriangular()\nUniform()\nBeta()\nExponential()\nGamma()\nWeibull()\nPoisson()\nBinomial()\nBernoulli()","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"In order to define a simulated input you need to use the rand function. By assigning a variable name, you can generate any simulated vector you want.","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"using Distributions\ninput_variable = rand(Normal(0,1),100)","category":"page"},{"location":"tutorials/1_first_model/#Creating-a-simple-model-1","page":"Building your first model","title":"Creating a simple model","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"A model is either a visual or mathematical representation of a situation or system. The easiest example of a model is","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"PROFIT = REVENUE - EXPENSES","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"Let's create a simple simulation model with 1000 trials with the following inputs:","category":"page"},{"location":"tutorials/1_first_model/#Setup-environment-and-inputs-1","page":"Building your first model","title":"Setup environment and inputs","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"using Pkg\nPkg.add(\"Distributions\")\nPkg.add(\"StatsBase\")\nPkg.add(\"Statistics\")\nPkg.add(\"Dates\")\nPkg.add(\"MCHammer\")\nPkg.add(\"DataFrames\")\nPkg.add(\"Gadfly\")","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"using Distributions, StatsBase, DataFrames, MCHammer\nn_trials = 1000\nRevenue = rand(TriangularDist(2500000,4000000,3000000), n_trials)\nExpenses = rand(TriangularDist(1400000,3000000,2000000), n_trials)","category":"page"},{"location":"tutorials/1_first_model/#Define-a-Model-and-Outputs-1","page":"Building your first model","title":"Define a Model and Outputs","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"# The Model\nProfit = Revenue - Expenses\n\n#Trial Results : the Profit vector (OUTPUT)\nProfit","category":"page"},{"location":"tutorials/1_first_model/#Analyzing-the-results-in-Julia-1","page":"Building your first model","title":"Analyzing the results in Julia","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"# `fractiles()` allows you to get the percentiles at various increments.\n\nfractiles(Profit)","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"\ndensity_chrt(Profit)","category":"page"},{"location":"tutorials/1_first_model/#Sensitivity-Analysis-1","page":"Building your first model","title":"Sensitivity Analysis","text":"","category":"section"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"First we need to create a sensitivity table with hcat() using both the input and output vectors.","category":"page"},{"location":"tutorials/1_first_model/#","page":"Building your first model","title":"Building your first model","text":"\n#Construct the sensitivity input table by consolidating all the relevant\n#inputs and outputs.\n\ns_table = hcat(Profit, Revenue, Expenses)\n\n#We then need to convert to a DataFrame and add names\n\ns_table = DataFrame(s_table)\nnames!(s_table, [:Profit, :Revenue, :Expenses])\n\n#To produce a sensitivity tornado chart, we need to select the output against\n#which the inputs are measured for effect.\n\nsensitivity_chrt(s_table, 1, 3)","category":"page"},{"location":"tutorials/2_Correlated_Model/#Correlating-Variables-in-Your-Model-1","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"To get started, we are going to recap what we did in your first model and build a correlated version of the same model and compare.","category":"page"},{"location":"tutorials/2_Correlated_Model/#Building-a-Simple-Uncorrelated-Model-1","page":"Correlating Variables in Your Model","title":"Building a Simple Uncorrelated Model","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"using Pkg\nPkg.add(\"Distributions\")\nPkg.add(\"StatsBase\")\nPkg.add(\"Statistics\")\nPkg.add(\"Dates\")\nPkg.add(\"MCHammer\")\nPkg.add(\"DataFrames\")\nPkg.add(\"Gadfly\")","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"using Distributions, StatsBase, DataFrames, MCHammer\nn_trials = 10000\nRevenue = rand(TriangularDist(2500000,4000000,3000000), n_trials)\nExpenses = rand(TriangularDist(1400000,3000000,2000000), n_trials)\n\n# The Model\nProfit = Revenue - Expenses\n\n#Trial Results : the Profit vector (OUTPUT)\nProfit\n\n# Trials or Results Table (OUTPUT)\nTrials = hcat(Profit, Revenue, Expenses)\nTrials = DataFrame(Trials)\nnames!(Trials, [:Profit, :Revenue, :Expenses])\n\ncormat(Trials)","category":"page"},{"location":"tutorials/2_Correlated_Model/#Applying-correlation-to-your-simulation-1","page":"Correlating Variables in Your Model","title":"Applying correlation to your simulation","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Using the corvar() function, we are going to correlate the Revenue and Expenses at -0.8 and generate the results tables for both the correlated and uncorrelated versions.","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"#Apply correlation to random samples\nRev_Exp_Cor = 0.8\ncor_matrix = [1 Rev_Exp_Cor; Rev_Exp_Cor 1]\n\n#Validate input correlation. You can also use cormat() to define the correlation\n#matrix from historical data.\ncor_matrix","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"It is very important to join Trial into an array before applying correlation. Furthermore, this step is necessary in order to produce a sensitivity_chrt()","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"c_table = [Revenue Expenses]\nC_Trials = corvar(c_table, n_trials, cor_matrix)\n\n#Correlated Model(2) - Create Correlated Results Array\nC_Profit = C_Trials[1] - C_Trials[2]\nC_Trials = [C_Profit, C_Trials[1], C_Trials[2]]\nC_Trials = DataFrame(C_Trials)\nnames!(C_Trials, [:C_Profit, :C_Revenue, :C_Expenses])\n\ncormat(C_Trials)\n","category":"page"},{"location":"tutorials/2_Correlated_Model/#Analyze-the-impact-of-correlation-on-your-output-1","page":"Correlating Variables in Your Model","title":"Analyze the impact of correlation on your output","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#Input-Correlation-between-Revenue-and-Expenses-1","page":"Correlating Variables in Your Model","title":"Input Correlation between Revenue and Expenses","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Input Correlation:","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"cor(Revenue,Expenses)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Input Correlation for the Correlated Model:","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"cor(C_Trials[2],C_Trials[3])","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Make sure to put a line in your project that lists all the outputs you can query with the charting and stats functions.","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"println(\"Model Outputs: Trials, C_Trials, Profit, C_Profit\")","category":"page"},{"location":"tutorials/2_Correlated_Model/#Correlated-vs.-Uncorrelated-results-in-Julia-1","page":"Correlating Variables in Your Model","title":"Correlated vs. Uncorrelated results in Julia","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Let us compare the percentiles of an uncorrelated  model vs. a correlated one.","category":"page"},{"location":"tutorials/2_Correlated_Model/#Uncorrelated-Results-1","page":"Correlating Variables in Your Model","title":"Uncorrelated Results","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"density_chrt(Profit)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Probability of Making 1m or less (uncorrelated) :","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"GetCertainty(Profit, 1000000, 0)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"fractiles() allows you to get the percentiles at various increments.","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"fractiles(Profit)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"sensitivity_chrt(Trials,1)","category":"page"},{"location":"tutorials/2_Correlated_Model/#Correlated-Results-1","page":"Correlating Variables in Your Model","title":"Correlated Results","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"density_chrt(C_Profit)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Probability of Making 1m or less (correlated) :","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"GetCertainty(C_Profit, 1000000, 0)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"fractiles(C_Profit)","category":"page"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"sensitivity_chrt(C_Trials,1)","category":"page"},{"location":"tutorials/2_Correlated_Model/#A-quick-analysis-of-the-results-1","page":"Correlating Variables in Your Model","title":"A quick analysis of the results","text":"","category":"section"},{"location":"tutorials/2_Correlated_Model/#","page":"Correlating Variables in Your Model","title":"Correlating Variables in Your Model","text":"Accounting for correlation meant a 5% (42.5% vs. 47.7%) reduction in probability of not making our goals.\nThe Worse Case goes from -290k to 230k, a 225% difference\nThe critical driver in both cases is expenses.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Simulated-NPV-with-Time-Series-1","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#Load-Environment-1","page":"Simulated NPV with Time-Series","title":"Load Environment","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Let's start by making sure all the tools we nned are loaded up. You will almost always need to load these packages up anytime you are build a Monte-Carlo model.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"using Pkg\nPkg.add(\"Distributions\")\nPkg.add(\"StatsBase\")\nPkg.add(\"Statistics\")\nPkg.add(\"Dates\")\nPkg.add(\"MCHammer\")\nPkg.add(\"DataFrames\")\nPkg.add(\"Gadfly\")","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"using Distributions\nusing Dates\nusing Gadfly\nusing StatsBase\nusing MCHammer\nusing DataFrames","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Setup-Inputs-and-Outputs-1","page":"Simulated NPV with Time-Series","title":"Setup Inputs and Outputs","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"The next critical step is to setup key inputs, arrays and other important model parameters.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"\n#Setup the Date Range for the analysis\ndr = collect(Date(2019,1,01):Dates.Year(1):Date(2023,01,01))\n\n#Setup Global Inputs\nForecastYrs = 5\nTrials = 10000\nUnits = [5000, 10000, 17000, 18000, 20000]\nInitialInvestment = 250000\nInvestment = [100000, 0, 0, 25000,0] #fill(0,ForecastYrs)\n\n#Setup Outputs\nSensitivity_Tbl = []\n\nProjectNPV = []\nUSP = []\nUSC =[]\nDR = []\nOP =[]\nAnnual_CashFlows =[]","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Build-Simulation-Model-1","page":"Simulated NPV with Time-Series","title":"Build Simulation Model","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Monte-Carlo simulation needs to generate a table of scenarios which are known as ***Trials***. A trial documents, in the form of a row, all of the inputs and calculated outputs for a particular scenario.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Using this results table allows you to runs all sorts of analysis, including sensitivity analysis and assigning probabilities to outcomes. To generate this table, you need to loop your equation/function as many times as you need and vary the inputs using probability distributions.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Another challenge to account for is that our example is a 5yr NPV model which requires building and analyzing the results over multiple periods. To extend the model, we are using MCHammer's GBMM function that allows to project a random walk forecast over how ever many periods you need, which extends automatically the model in Julia.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"for i = 1:Trials\n\n    UnitSellPrice = GBMM(80, 0.2, 0.1, ForecastYrs)\n    UnitCost = GBMM(40, 0.1, 0.05, ForecastYrs)\n\n    #Each period the discount rate is independent. If you use an additive method instead of multiplicative, you can end up with differences. These may or may not impact the decision. For simulation it is best to use the risk free rate.\n\n        #Multiplicative Method\n        DiscountRate = cumprod(rand(Normal(0.02,0.0075),ForecastYrs)+fill(1,ForecastYrs))#accumulate(+,rand(Normal(0.02,0.0075),ForecastYrs))+fill(1,ForecastYrs)\n\n        #Additive Method\n        #DiscountRate = accumulate(+,rand(Normal(0.02,0.0075),ForecastYrs))+fill(1,ForecastYrs)\n\n        #a static DR\n        #DiscountRate = accumulate(+, fill(0.02,ForecastYrs))+fill(1,ForecastYrs)\n\n    #print(DiscountRate)\n\n    #DCF Elements\n    Annual_Sales = UnitSellPrice .* Units\n    Annual_COGS = UnitCost .* Units\n    OPEX = rand(TriangularDist(.2,0.5,0.35),ForecastYrs) .* Annual_Sales\n\n    #Constant Dollar Cashflow\n    #CashFlow_C = (Annual_Sales - Annual_COGS - OPEX - Investment)\n\n    #Discounted CashFLow over multpile periods. This function uses arrays and DOT functions.\n\n    CashFlow = (Annual_Sales - Annual_COGS - OPEX - Investment) ./ DiscountRate\n\n    #Calculated Output\n    Trial_NPV = sum(CashFlow)-InitialInvestment\n\n#Convert Arrays to Scalars for sensitivity analysis\n    push!(ProjectNPV, Trial_NPV)\n    push!(USC, mean(UnitCost))\n    push!(USP, mean(UnitSellPrice))\n    push!(DR,  mean(DiscountRate))\n    push!(OP,  mean(OPEX))\n    push!(Annual_CashFlows,  CashFlow)\n\nend","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Setting-up-data-for-analysis-and-charting-1","page":"Simulated NPV with Time-Series","title":"Setting up data for analysis and charting","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Setup inputs/outputs(above) and output tables (below) for sensitivity analysis and charting. Since correlation is based on the same math as regression, the only way to calculate sensitivity on an Array > 1 (in this case multiple years) is to condense the array into a scalar value using either mean, sum or any other transform because what ever you pick will generate a similar or identical result.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Sensitivity_Tbl = DataFrame(hcat(ProjectNPV, USC, USP, DR, OP))\nnames!(Sensitivity_Tbl, [:ProjectNPV, :USC, :USP, :DR, :OP])\nNPV_Sensitivity = cormat(Sensitivity_Tbl,1)","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Stats-1","page":"Simulated NPV with Time-Series","title":"Stats","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"Generate model results and list all the outputs for your charting and analysis functions.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"print(\"Project Mean: \", mean(ProjectNPV),\"\\n\")\nprint(\"Project Std.Dev: \", std(ProjectNPV),\"\\n\")\nprint(\"Prob. of Neg. NPV: \", GetCertainty(ProjectNPV,0,0),\"\\n\")\nprint(\"NPV p10, p50, p90 : \", quantile(collect(Float64, ProjectNPV),[0.1,0.5,0.9]),\"\\n\")\nprintln(\"\")\nprintln(\"OUTPUTS: Annual_CashFlows, ProjectNPV, Sensitivity_Tbl\")\nprintln(\"date range = dr\")","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"To generate a complete list of percentiles, use the fractiles().","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"fractiles(ProjectNPV)","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"##Visualizing the outputs","category":"page"},{"location":"tutorials/3_NPV_testmodel/#Looking-at-the-Probability-Distribution-1","page":"Simulated NPV with Time-Series","title":"Looking at the Probability Distribution","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"histogram_chrt(ProjectNPV, \"Five Year NPV\")","category":"page"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"density_chrt(ProjectNPV, \"Five Year NPV\")","category":"page"},{"location":"tutorials/3_NPV_testmodel/#What-variables-are-most-influential-on-my-output-distribution?-1","page":"Simulated NPV with Time-Series","title":"What variables are most influential on my output distribution?","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"sensitivity_chrt(Sensitivity_Tbl, 1, 3)","category":"page"},{"location":"tutorials/3_NPV_testmodel/#What-does-my-cashflow-look-like-over-time?-1","page":"Simulated NPV with Time-Series","title":"What does my cashflow look like over time?","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"The trend chart is a median centered chart that establishes a 90% confidence interval for each period. Remember dr or the date range is specified at the top.","category":"page"},{"location":"tutorials/3_NPV_testmodel/#CashFlow-forecast-1","page":"Simulated NPV with Time-Series","title":"CashFlow forecast","text":"","category":"section"},{"location":"tutorials/3_NPV_testmodel/#","page":"Simulated NPV with Time-Series","title":"Simulated NPV with Time-Series","text":"trend_chrt(Annual_CashFlows, dr)","category":"page"}]
}
